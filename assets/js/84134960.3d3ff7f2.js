"use strict";(self.webpackChunklightning_docs=self.webpackChunklightning_docs||[]).push([[9807],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=p(n),m=a,h=g["".concat(s,".").concat(m)]||g[m]||u[m]||r;return n?o.createElement(h,i(i({ref:t},c),{},{components:n})):o.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1977:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={},i="Signal",l={unversionedId:"Communication/Signal",id:"Communication/Signal",title:"Signal",description:"The signal() method notifies a component's parent that an event happened on the component. It gives the parent the opportunity to route the event to a handler.",source:"@site/docs/Communication/Signal.md",sourceDirName:"Communication",slug:"/Communication/Signal",permalink:"/lightning-docs/docs/Communication/Signal",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Communication/Signal.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Fire Ancestors",permalink:"/lightning-docs/docs/Communication/FireAncestors"},next:{title:"Components",permalink:"/lightning-docs/docs/Components/"}},s={},p=[{value:"Pass Signals",id:"pass-signals",level:2},{value:"Live Demo",id:"live-demo",level:2}],c={toc:p},g="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"signal"},"Signal"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"signal()")," method notifies a component's parent that an event happened on the component. It gives the parent the opportunity to route the event to a handler."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"this.signal('signalName', arg1, arg2... argx)\n")),(0,a.kt)("p",null,"You define the signals to be handled by a parent component by specifying the required ",(0,a.kt)("inlineCode",{parentName:"p"},"signals")," property in the parent. The ",(0,a.kt)("inlineCode",{parentName:"p"},"signals")," property contains a ",(0,a.kt)("em",{parentName:"p"},"literal object")," that maps the signal name to a class method. If they are identical, the associated method name is used."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'static _template() {\n    return {\n        Button: {\n            type: ExampleButton,\n            signals: {\n                toggleText: "_toggleText"\n            }\n        }\n    }\n    \n    _toggleText() {\n        // Handle toggle here.\n    }\n}\n')),(0,a.kt)("h2",{id:"pass-signals"},"Pass Signals"),(0,a.kt)("p",null,"If you would like to pass a signal to the parent, you could implement this by providing a ",(0,a.kt)("em",{parentName:"p"},"handler")," that ",(0,a.kt)("em",{parentName:"p"},"re-signals")," the signal. You can achieve this in a more convenient manner using the ",(0,a.kt)("inlineCode",{parentName:"p"},"passSignals")," property:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"static _template() {\n    return {\n        Button: {\n            type: ExampleButton,\n            passSignals: {\n                toggleText: true, otherSignal: 'renamedOtherSignal'\n            }\n        }\n    }\n}\n")),(0,a.kt)("h2",{id:"live-demo"},"Live Demo"),(0,a.kt)("p",null,"The example below shows a button that signals its parent to show / hide a message and change the font color."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class SignalDemo extends lng.Application {\n    static _template() {\n        return {\n            x: 20, y: 20,\n            Button: {\n                type: ExampleButton,\n                buttonText: 'Toggle',\n                //indicates the signals that your child component will send\n                signals: {\n                    toggleText: true,\n                }\n            },\n            Message: {\n                y: 80, alpha: 0, text: { text: 'Message' }\n            }\n        }\n    }\n    toggleText(alpha, color) {\n        this.tag('Message').patch({color, smooth: { alpha }})\n    }\n    _getFocused() {\n        return this.tag('Button')\n    }\n}\n\nclass ExampleButton extends lng.component {\n    static _template() {\n        return {\n            color: 0xffffffff,\n            texture: lng.Tools.getRoundRect(200, 40, 4),\n            Label: {\n                x: 100, y: 22, mount: .5, color: 0xff1f1f1f, text: { fontSize: 20 }\n            }\n        }\n    }\n    _init() {\n        this.tag('Label').patch({ text: { text: this.buttonText }})\n        this.toggle = false\n        this.buttonColor = 0xffff00ff\n    }\n    _handleEnter() {\n        this.toggle = !this.toggle\n        if(this.toggle) {\n            this.buttonColor = this.buttonColor === 0xffff00ff ? 0xff00ffff : 0xffff00ff\n        }\n        this.signal('toggleText', this.toggle, this.buttonColor)\n    }\n}\n\nconst App = new SignalDemo({stage: {w: window.innerWidth, h: window.innerHeight, useImageWorker: false}});\ndocument.body.appendChild(App.stage.getCanvas());\n")))}u.isMDXComponent=!0}}]);