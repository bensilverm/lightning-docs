"use strict";(self.webpackChunklightning_docs=self.webpackChunklightning_docs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Accessibility","href":"/lightning-docs/docs/Accessibility/","docId":"Accessibility/index"},{"type":"category","label":"Animations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Action Value","href":"/lightning-docs/docs/Animations/ActionValue","docId":"Animations/ActionValue"},{"type":"link","label":"Actions","href":"/lightning-docs/docs/Animations/Actions","docId":"Animations/Actions"},{"type":"link","label":"Attributes","href":"/lightning-docs/docs/Animations/Attributes","docId":"Animations/Attributes"},{"type":"link","label":"Events","href":"/lightning-docs/docs/Animations/Events","docId":"Animations/Events"},{"type":"link","label":"Methods","href":"/lightning-docs/docs/Animations/Methods","docId":"Animations/Methods"},{"type":"link","label":"Value Smoothing","href":"/lightning-docs/docs/Animations/ValueSmoothing","docId":"Animations/ValueSmoothing"}],"href":"/lightning-docs/docs/Animations/"},{"type":"category","label":"Communication","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Fire Ancestors","href":"/lightning-docs/docs/Communication/FireAncestors","docId":"Communication/FireAncestors"},{"type":"link","label":"Signal","href":"/lightning-docs/docs/Communication/Signal","docId":"Communication/Signal"}],"href":"/lightning-docs/docs/Communication/"},{"type":"category","label":"Components","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Component Creation","href":"/lightning-docs/docs/Components/CompCreation","docId":"Components/CompCreation"},{"type":"category","label":"Component States","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"State Nesting","href":"/lightning-docs/docs/Components/CompStates/NestingStates","docId":"Components/CompStates/NestingStates"},{"type":"link","label":"Change Events","href":"/lightning-docs/docs/Components/CompStates/StateChEvents","docId":"Components/CompStates/StateChEvents"},{"type":"link","label":"State Creation","href":"/lightning-docs/docs/Components/CompStates/StateCreation","docId":"Components/CompStates/StateCreation"},{"type":"link","label":"State Switching","href":"/lightning-docs/docs/Components/CompStates/SwitchingStates","docId":"Components/CompStates/SwitchingStates"}],"href":"/lightning-docs/docs/Components/CompStates/"},{"type":"link","label":"Lifecycle Events","href":"/lightning-docs/docs/Components/LifecycleEvents","docId":"Components/LifecycleEvents"}],"href":"/lightning-docs/docs/Components/"},{"type":"category","label":"Handling Input","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Mouse Input","href":"/lightning-docs/docs/HandlingInput/Mouse","docId":"HandlingInput/Mouse"},{"type":"category","label":"Remote and Keyboard Control Interaction","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Focus","href":"/lightning-docs/docs/HandlingInput/RemoteControl/Focus","docId":"HandlingInput/RemoteControl/Focus"},{"type":"link","label":"Key Handling","href":"/lightning-docs/docs/HandlingInput/RemoteControl/KeyHandling","docId":"HandlingInput/RemoteControl/KeyHandling"}],"href":"/lightning-docs/docs/HandlingInput/RemoteControl/"},{"type":"link","label":"Touch Input","href":"/lightning-docs/docs/HandlingInput/Touch","docId":"HandlingInput/Touch"}],"href":"/lightning-docs/docs/HandlingInput/"},{"type":"category","label":"Render Engine","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Elements","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Children","href":"/lightning-docs/docs/RenderEngine/Elements/Children","docId":"RenderEngine/Elements/Children"},{"type":"link","label":"Positioning","href":"/lightning-docs/docs/RenderEngine/Elements/Positioning","docId":"RenderEngine/Elements/Positioning"},{"type":"link","label":"Rendering","href":"/lightning-docs/docs/RenderEngine/Elements/Rendering","docId":"RenderEngine/Elements/Rendering"},{"type":"link","label":"Transform","href":"/lightning-docs/docs/RenderEngine/Elements/Transform","docId":"RenderEngine/Elements/Transform"}],"href":"/lightning-docs/docs/RenderEngine/Elements/"},{"type":"link","label":"Render Tree","href":"/lightning-docs/docs/RenderEngine/RenderTree","docId":"RenderEngine/RenderTree"},{"type":"category","label":"Shaders","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Dithering","href":"/lightning-docs/docs/RenderEngine/Shaders/Dithering","docId":"RenderEngine/Shaders/Dithering"},{"type":"link","label":"Fade Out","href":"/lightning-docs/docs/RenderEngine/Shaders/FadeOut","docId":"RenderEngine/Shaders/FadeOut"},{"type":"link","label":"Hole","href":"/lightning-docs/docs/RenderEngine/Shaders/Hole","docId":"RenderEngine/Shaders/Hole"},{"type":"link","label":"Inversion","href":"/lightning-docs/docs/RenderEngine/Shaders/Inversion","docId":"RenderEngine/Shaders/Inversion"},{"type":"link","label":"Light 3D","href":"/lightning-docs/docs/RenderEngine/Shaders/Light3D","docId":"RenderEngine/Shaders/Light3D"},{"type":"link","label":"Linear Blur","href":"/lightning-docs/docs/RenderEngine/Shaders/LinearBlur","docId":"RenderEngine/Shaders/LinearBlur"},{"type":"link","label":"Magnifier","href":"/lightning-docs/docs/RenderEngine/Shaders/Magnifier","docId":"RenderEngine/Shaders/Magnifier"},{"type":"link","label":"Perspective","href":"/lightning-docs/docs/RenderEngine/Shaders/Perspective","docId":"RenderEngine/Shaders/Perspective"},{"type":"link","label":"Pixelate","href":"/lightning-docs/docs/RenderEngine/Shaders/Pixelate","docId":"RenderEngine/Shaders/Pixelate"},{"type":"link","label":"Radial Gradient","href":"/lightning-docs/docs/RenderEngine/Shaders/RadialGradient","docId":"RenderEngine/Shaders/RadialGradient"},{"type":"link","label":"Rounded Rectangle","href":"/lightning-docs/docs/RenderEngine/Shaders/RoundedRectangle","docId":"RenderEngine/Shaders/RoundedRectangle"},{"type":"link","label":"Spinner2","href":"/lightning-docs/docs/RenderEngine/Shaders/Spinner2","docId":"RenderEngine/Shaders/Spinner2"},{"type":"link","label":"Vignette","href":"/lightning-docs/docs/RenderEngine/Shaders/Vignette","docId":"RenderEngine/Shaders/Vignette"}],"href":"/lightning-docs/docs/RenderEngine/Shaders/"},{"type":"category","label":"Texture Types","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Canvas","href":"/lightning-docs/docs/RenderEngine/Textures/Canvas","docId":"RenderEngine/Textures/Canvas"},{"type":"link","label":"Custom","href":"/lightning-docs/docs/RenderEngine/Textures/Custom","docId":"RenderEngine/Textures/Custom"},{"type":"link","label":"Image","href":"/lightning-docs/docs/RenderEngine/Textures/Image","docId":"RenderEngine/Textures/Image"},{"type":"link","label":"Rectangle","href":"/lightning-docs/docs/RenderEngine/Textures/Rectangle","docId":"RenderEngine/Textures/Rectangle"},{"type":"link","label":"Text","href":"/lightning-docs/docs/RenderEngine/Textures/Text","docId":"RenderEngine/Textures/Text"},{"type":"link","label":"Toolbox","href":"/lightning-docs/docs/RenderEngine/Textures/Toolbox","docId":"RenderEngine/Textures/Toolbox"}],"href":"/lightning-docs/docs/RenderEngine/Textures/"}],"href":"/lightning-docs/docs/RenderEngine/"},{"type":"link","label":"Runtime Configuration","href":"/lightning-docs/docs/RuntimeConfig/","docId":"RuntimeConfig/index"},{"type":"category","label":"Templates","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Clipping","href":"/lightning-docs/docs/Templates/Clipping","docId":"Templates/Clipping"},{"type":"link","label":"Events","href":"/lightning-docs/docs/Templates/Events","docId":"Templates/Events"},{"type":"link","label":"Flexbox","href":"/lightning-docs/docs/Templates/Flexbox","docId":"Templates/Flexbox"},{"type":"link","label":"Patching","href":"/lightning-docs/docs/Templates/Patching","docId":"Templates/Patching"},{"type":"link","label":"Tags","href":"/lightning-docs/docs/Templates/Tags","docId":"Templates/Tags"}],"href":"/lightning-docs/docs/Templates/"},{"type":"category","label":"Transitions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Attributes","href":"/lightning-docs/docs/Transitions/Attributes","docId":"Transitions/Attributes"},{"type":"link","label":"Events","href":"/lightning-docs/docs/Transitions/Events","docId":"Transitions/Events"},{"type":"link","label":"Methods","href":"/lightning-docs/docs/Transitions/Methods","docId":"Transitions/Methods"}],"href":"/lightning-docs/docs/Transitions/"},{"type":"category","label":"TypeScript","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Augmentation","href":"/lightning-docs/docs/TypeScript/Augmentation","docId":"TypeScript/Augmentation"},{"type":"category","label":"Components","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Subclassable Components","href":"/lightning-docs/docs/TypeScript/Components/SubclassableComponents","docId":"TypeScript/Components/SubclassableComponents"},{"type":"link","label":"Component Template Specs","href":"/lightning-docs/docs/TypeScript/Components/TemplateSpecs","docId":"TypeScript/Components/TemplateSpecs"},{"type":"link","label":"Component Type Configs","href":"/lightning-docs/docs/TypeScript/Components/TypeConfigs","docId":"TypeScript/Components/TypeConfigs"}],"href":"/lightning-docs/docs/TypeScript/Components/"},{"type":"link","label":"Guidelines / Gotchas","href":"/lightning-docs/docs/TypeScript/GuidelinesGotchas","docId":"TypeScript/GuidelinesGotchas"}],"href":"/lightning-docs/docs/TypeScript/"},{"type":"link","label":"Lightning Core Reference","href":"/lightning-docs/docs/","docId":"index"}]},"docs":{"Accessibility/index":{"id":"Accessibility/index","title":"Accessibility","description":"As with all interfaces, Accessibility starts with good design choices. We recommend reading Designing for Web Accessibility from the W3C for an extensive list of best practices for creating an accessible UI.","sidebar":"tutorialSidebar"},"Animations/Actions":{"id":"Animations/Actions","title":"Actions","description":"The actions of an animation define what happens with the specified views and properties while the animation is executed.","sidebar":"tutorialSidebar"},"Animations/ActionValue":{"id":"Animations/ActionValue","title":"Action Value","description":"Every action should have a v property specified, which defines the value that is applied to the action property during the animation.","sidebar":"tutorialSidebar"},"Animations/Attributes":{"id":"Animations/Attributes","title":"Attributes","description":"You can use animation attributes to define the general behavior of an animation.","sidebar":"tutorialSidebar"},"Animations/Events":{"id":"Animations/Events","title":"Events","description":"An animation is an EventEmitter that can emit the following events:","sidebar":"tutorialSidebar"},"Animations/index":{"id":"Animations/index","title":"Animations","description":"You can use animations to describe a fixed change of property values over time.","sidebar":"tutorialSidebar"},"Animations/Methods":{"id":"Animations/Methods","title":"Methods","description":"You can use the following methods on an animation:","sidebar":"tutorialSidebar"},"Animations/ValueSmoothing":{"id":"Animations/ValueSmoothing","title":"Value Smoothing","description":"For each control point, you can specify how the value curve around it  should behave.","sidebar":"tutorialSidebar"},"Communication/FireAncestors":{"id":"Communication/FireAncestors","title":"Fire Ancestors","description":"The fireAncestors() method sends a signal to a distant parent component, without propagating it to all the parents.","sidebar":"tutorialSidebar"},"Communication/index":{"id":"Communication/index","title":"Communication","description":"Lightning uses the following features for inter-component communication:","sidebar":"tutorialSidebar"},"Communication/Signal":{"id":"Communication/Signal","title":"Signal","description":"The signal() method notifies a component\'s parent that an event happened on the component. It gives the parent the opportunity to route the event to a handler.","sidebar":"tutorialSidebar"},"Components/CompCreation":{"id":"Components/CompCreation","title":"Component Creation","description":"You create a new component (e.g., MyComponent) as follows:","sidebar":"tutorialSidebar"},"Components/CompStates/index":{"id":"Components/CompStates/index","title":"Component States","description":"You can use component states to easily keep track of what your application is doing at a certain state. Component states keep your code overview neat and consistent.","sidebar":"tutorialSidebar"},"Components/CompStates/NestingStates":{"id":"Components/CompStates/NestingStates","title":"State Nesting","description":"You can nest states by defining a component state within another component state (which by itself contains its own states).","sidebar":"tutorialSidebar"},"Components/CompStates/StateChEvents":{"id":"Components/CompStates/StateChEvents","title":"Change Events","description":"Each component state change fires an $enter and an $exit event.","sidebar":"tutorialSidebar"},"Components/CompStates/StateCreation":{"id":"Components/CompStates/StateCreation","title":"State Creation","description":"You define component states by populating the _state definition with states, which are class objects.","sidebar":"tutorialSidebar"},"Components/CompStates/SwitchingStates":{"id":"Components/CompStates/SwitchingStates","title":"State Switching","description":"You can switch states with this._setState(\'MyStateName\').","sidebar":"tutorialSidebar"},"Components/index":{"id":"Components/index","title":"Components","description":"Components are added to your App\'s template to make them reusable and extendable throughout the App.","sidebar":"tutorialSidebar"},"Components/LifecycleEvents":{"id":"Components/LifecycleEvents","title":"Lifecycle Events","description":"You can add logic to your App by implementing lifecycle events. These events are methods that are called when certain preset conditions (properties) apply.","sidebar":"tutorialSidebar"},"HandlingInput/index":{"id":"HandlingInput/index","title":"Handling Input","description":"Lightning supports the following input methods:","sidebar":"tutorialSidebar"},"HandlingInput/Mouse":{"id":"HandlingInput/Mouse","title":"Mouse Input","description":"If you have a device that allows a Mouse or Pointer device, Lightning can listen for Mouse events in the browser and translate them to the canvas element.","sidebar":"tutorialSidebar"},"HandlingInput/RemoteControl/Focus":{"id":"HandlingInput/RemoteControl/Focus","title":"Focus","description":"To handle key events, Lightning needs to know which component is the active component. This component and its descendants (including the App itself) are called the focus path.","sidebar":"tutorialSidebar"},"HandlingInput/RemoteControl/index":{"id":"HandlingInput/RemoteControl/index","title":"Remote and Keyboard Control Interaction","description":"Remote controls and keyboards function very similarly, a user presses a button and that button press is sent to the UI as a keypress with an ASCII code, which is mapped to a name. When working on a computer with a keyboard, most keypresses are sent directly to the browser for handling. A remote control may operate differently, some keypresses may not be sent to the UI such as Volume control. Additionally, how the remote control sends multiple keypresses or holding down a key may vary by TV device. For instance, holding down a button on a remote may send the keypress right away, and then repeat a keypress every 500ms.","sidebar":"tutorialSidebar"},"HandlingInput/RemoteControl/KeyHandling":{"id":"HandlingInput/RemoteControl/KeyHandling","title":"Key Handling","description":"TV remotes usually generate key events in the browser. Lightning attaches a key event listener to the canvas element, and provides a way to handle key-based input.","sidebar":"tutorialSidebar"},"HandlingInput/Touch":{"id":"HandlingInput/Touch","title":"Touch Input","description":"If you have a touch screen device, Lightning can listen for Touch + Mouse events in the browser and translate them to the canvas element.","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"Lightning Core Reference","description":"The Reference Documentation for Lightning Core contains detailed descriptions about various concepts of Lightning Core.","sidebar":"tutorialSidebar"},"RenderEngine/Elements/Children":{"id":"RenderEngine/Elements/Children","title":"Children","description":"You use the .children property to set the configuration of child nodes. This property is an Array containing all child nodes, where every node has a .children property.","sidebar":"tutorialSidebar"},"RenderEngine/Elements/index":{"id":"RenderEngine/Elements/index","title":"Elements","description":"The Lightning Render Tree consists of several elements. Elements are render primitives of the lng.Element type that determines the display of a texture. A texture can be anything, such as a piece of text or an image, in a solid color or a gradient.","sidebar":"tutorialSidebar"},"RenderEngine/Elements/Positioning":{"id":"RenderEngine/Elements/Positioning","title":"Positioning","description":"The following properties apply to the position of an element:","sidebar":"tutorialSidebar"},"RenderEngine/Elements/Rendering":{"id":"RenderEngine/Elements/Rendering","title":"Rendering","description":"The following properties determine how the active texture and / or descendant textures are rendered:","sidebar":"tutorialSidebar"},"RenderEngine/Elements/Transform":{"id":"RenderEngine/Elements/Transform","title":"Transform","description":"An element can be scaled or rotated along with all of its descendants.","sidebar":"tutorialSidebar"},"RenderEngine/index":{"id":"RenderEngine/index","title":"Render Engine","description":"The most important Lightning component is the WebGL 2d Render Engine. Its purpose is to convert the defined and changed Render Tree to a series of WebGL commands as fast as possible.","sidebar":"tutorialSidebar"},"RenderEngine/RenderTree":{"id":"RenderEngine/RenderTree","title":"Render Tree","description":"The Lightning Render Tree can be considered similar to the HTML DOM Render Tree, because:","sidebar":"tutorialSidebar"},"RenderEngine/Shaders/Dithering":{"id":"RenderEngine/Shaders/Dithering","title":"Dithering","description":"With the Dithering shader, you can add a graining effect to the texture to be rendered.","sidebar":"tutorialSidebar"},"RenderEngine/Shaders/FadeOut":{"id":"RenderEngine/Shaders/FadeOut","title":"Fade Out","description":"The Fade Out shader fades out the edges of a texture by a specific amount.","sidebar":"tutorialSidebar"},"RenderEngine/Shaders/Hole":{"id":"RenderEngine/Shaders/Hole","title":"Hole","description":"The Hole shader cuts a rectangle out of the texture. This can be used when you want to show something like live TV or a video in the background but still want a good looking background around it.","sidebar":"tutorialSidebar"},"RenderEngine/Shaders/index":{"id":"RenderEngine/Shaders/index","title":"Shaders","description":"Shaders in Lightning allow you to alter textures, or draw various effects over the GPU. By default, the Lightning Core provides shaders that apply some of the most commonly used effects for you to use.","sidebar":"tutorialSidebar"},"RenderEngine/Shaders/Inversion":{"id":"RenderEngine/Shaders/Inversion","title":"Inversion","description":"With the Inversion shader, you can invert the colors of the texture to be rendered with a specific amount.","sidebar":"tutorialSidebar"},"RenderEngine/Shaders/Light3D":{"id":"RenderEngine/Shaders/Light3D","title":"Light 3D","description":"With the Light 3D shader you can add a lighting & 3D effect to the texture to be rendered.","sidebar":"tutorialSidebar"},"RenderEngine/Shaders/LinearBlur":{"id":"RenderEngine/Shaders/LinearBlur","title":"Linear Blur","description":"With the Linear Blur shader, you can add a linear blur effect to the texture to be rendered.","sidebar":"tutorialSidebar"},"RenderEngine/Shaders/Magnifier":{"id":"RenderEngine/Shaders/Magnifier","title":"Magnifier","description":"The Magnifier shader magnifies a section of the to be rendered of the texture to be rendered.","sidebar":"tutorialSidebar"},"RenderEngine/Shaders/Perspective":{"id":"RenderEngine/Shaders/Perspective","title":"Perspective","description":"With the Perspective shader, you can add a lighting & 3D effect to the texture to be rendered.","sidebar":"tutorialSidebar"},"RenderEngine/Shaders/Pixelate":{"id":"RenderEngine/Shaders/Pixelate","title":"Pixelate","description":"With the Pixelate shader, you can pixelate the texture to be rendered with a specific pixel size.","sidebar":"tutorialSidebar"},"RenderEngine/Shaders/RadialGradient":{"id":"RenderEngine/Shaders/RadialGradient","title":"Radial Gradient","description":"The Radial Gradient shader allows you to draw a radial gradient over a texture.","sidebar":"tutorialSidebar"},"RenderEngine/Shaders/RoundedRectangle":{"id":"RenderEngine/Shaders/RoundedRectangle","title":"Rounded Rectangle","description":"The Rounded Rectangle shader clips a texture from a rectangle with sharp points into a rectangle with corners that are curved into an arc.","sidebar":"tutorialSidebar"},"RenderEngine/Shaders/Spinner2":{"id":"RenderEngine/Shaders/Spinner2","title":"Spinner2","description":"The Spinner2 shader allows you to draw a loading / spinner icon on the screen. The Spinner2 shader is a successor to the Spinner shader which we do not recommend you use, its namespace however remains for backward compatibility.","sidebar":"tutorialSidebar"},"RenderEngine/Shaders/Vignette":{"id":"RenderEngine/Shaders/Vignette","title":"Vignette","description":"The Vignette shader allows you to apply a vignette effect to a texture.","sidebar":"tutorialSidebar"},"RenderEngine/Textures/Canvas":{"id":"RenderEngine/Textures/Canvas","title":"Canvas","description":"You can draw something to a canvas and then render the result as a texture.","sidebar":"tutorialSidebar"},"RenderEngine/Textures/Custom":{"id":"RenderEngine/Textures/Custom","title":"Custom","description":"You can add and use your own reusable texture types by extending the lng.Texture class.","sidebar":"tutorialSidebar"},"RenderEngine/Textures/Image":{"id":"RenderEngine/Textures/Image","title":"Image","description":"An image texture accepts a src property (referring to the URI of an image) that is subsequently fetched, loaded and rendered.","sidebar":"tutorialSidebar"},"RenderEngine/Textures/index":{"id":"RenderEngine/Textures/index","title":"Texture Types","description":"An element will only render something when a texture is defined. A texture is rendered as a background, and the children are rendered in front of it.","sidebar":"tutorialSidebar"},"RenderEngine/Textures/Rectangle":{"id":"RenderEngine/Textures/Rectangle","title":"Rectangle","description":"The rectangle texture is a single-pixel texture that is stretched based on the dimensions of the element.","sidebar":"tutorialSidebar"},"RenderEngine/Textures/Text":{"id":"RenderEngine/Textures/Text","title":"Text","description":"The text texture enables the rendering of a piece of text within an element.","sidebar":"tutorialSidebar"},"RenderEngine/Textures/Toolbox":{"id":"RenderEngine/Textures/Toolbox","title":"Toolbox","description":"The lng.Tools Class contains useful functions for creating some commonly used textures.","sidebar":"tutorialSidebar"},"RuntimeConfig/index":{"id":"RuntimeConfig/index","title":"Runtime Configuration","description":"When you initialize your application, you configure the behavior of Lightning at runtime. For example, you can define the use of WebWorkers or set the size of the canvas.","sidebar":"tutorialSidebar"},"Templates/Clipping":{"id":"Templates/Clipping","title":"Clipping","description":"It\'s possible to use only a selected part of the currently set texture. Because the dimensions might also change, the element behaves as if the texture was only the selected part.","sidebar":"tutorialSidebar"},"Templates/Events":{"id":"Templates/Events","title":"Events","description":"The following loading events can be fired by a texture:","sidebar":"tutorialSidebar"},"Templates/Flexbox":{"id":"Templates/Flexbox","title":"Flexbox","description":"Sometimes, absolute positioning is not enough. You may want to position elements stacked horizontally or vertically, or wrap items when there is too much to fit in an area. This process is called layouting and Lightning has a simple solution for it, which is called Flexbox.","sidebar":"tutorialSidebar"},"Templates/index":{"id":"Templates/index","title":"Templates","description":"A Lightning (static) template defines the Render Tree for a Lightning app. It uses nested JavaScript objects. If you create a Lightning App, a basic Render Tree is automatically set up from the static template.","sidebar":"tutorialSidebar"},"Templates/Patching":{"id":"Templates/Patching","title":"Patching","description":"Patching is a way to change the properties of existing elements in a template.","sidebar":"tutorialSidebar"},"Templates/Tags":{"id":"Templates/Tags","title":"Tags","description":"Tags are used to reference objects inside a template.","sidebar":"tutorialSidebar"},"Transitions/Attributes":{"id":"Transitions/Attributes","title":"Attributes","description":"You can use transition attributes to define the general behavior of a transition.","sidebar":"tutorialSidebar"},"Transitions/Events":{"id":"Transitions/Events","title":"Events","description":"A transition is an EventEmitter that can emit the following events:","sidebar":"tutorialSidebar"},"Transitions/index":{"id":"Transitions/index","title":"Transitions","description":"A transition is a gradual change of a property value. Transitions are able to accept dynamic values, as opposed to animations, which use fixed values.","sidebar":"tutorialSidebar"},"Transitions/Methods":{"id":"Transitions/Methods","title":"Methods","description":"You can use the various methods to get control over transitions, such as starting, stopping or resetting them.","sidebar":"tutorialSidebar"},"TypeScript/Augmentation":{"id":"TypeScript/Augmentation","title":"Augmentation","description":"There are certain global type structures provided by Lightning Core that your app may need/want to add on to. TypeScript allows such add-ons via Declaration Merging and Module Augmentation.","sidebar":"tutorialSidebar"},"TypeScript/Components/index":{"id":"TypeScript/Components/index","title":"Components","description":"Much of the time when writting a Lightning application, you\'re writting Components. Within each Component you define a Template which defines the starting properties, structure of children and properties of the children. There are","sidebar":"tutorialSidebar"},"TypeScript/Components/SubclassableComponents":{"id":"TypeScript/Components/SubclassableComponents","title":"Subclassable Components","description":"Usually, when creating a Lightning Component you do not need to specify your own generic parameters which are mixed into the ones passed further down into the Component base class. However, there are times when you want to make your Component type flexible and perhaps just as flexible as the Component base class which allows you to pass a Template Spec and Type Config. Perhaps you want to create a PageBase component that accepts any child Component of type T. Or a completely flexible MyBaseComponent which all of your App\'s Components extend. When doing this there are a few guidelines and gotchas you need to pay attention to that stem from some design choices in TypeScript.","sidebar":"tutorialSidebar"},"TypeScript/Components/TemplateSpecs":{"id":"TypeScript/Components/TemplateSpecs","title":"Component Template Specs","description":"Much of the time when writting a Lightning application, you\'re writting Components. Within each Component you define a Template which defines the starting properties, structure of children and properties of the children. For TypeScript to be aware of the structure of a Component\'s Template, you need to define what we call a Template Spec.","sidebar":"tutorialSidebar"},"TypeScript/Components/TypeConfigs":{"id":"TypeScript/Components/TypeConfigs","title":"Component Type Configs","description":"Type Configs define other types, outside of the Template Specs, that are used by a Component.","sidebar":"tutorialSidebar"},"TypeScript/GuidelinesGotchas":{"id":"TypeScript/GuidelinesGotchas","title":"Guidelines / Gotchas","description":"While great care was taken to make Lightning as type-safe as possible out of the box there is some care you need to take in order to maximize type-safety. There are also areas where type-safety is not possible. Keeping these guidelines and gotchas in mind (as well as familiarizing yourself with the rest of our documentation on TypeScript) will help you and your team enjoy the power of TypeScript with the least amount of headaches.","sidebar":"tutorialSidebar"},"TypeScript/index":{"id":"TypeScript/index","title":"TypeScript","description":"As of version 2.7.0, Lightning Core comes bundled with type definitions and in-code documentation which allow you to build Lightning apps in TypeScript. The following documentation assumes to an extent that you are already familiar with the basics of writting a Lightning app in JavaScript, but even if you have no experience at all with Lightning, you may find the tips below as well as the Lightning CLI lng create boilerplate (coming soon) and the types/documentation available now in your IDE by using TypeScript enough to get started.","sidebar":"tutorialSidebar"}}}')}}]);