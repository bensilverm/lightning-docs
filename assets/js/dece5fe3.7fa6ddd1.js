"use strict";(self.webpackChunklightning_docs=self.webpackChunklightning_docs||[]).push([[2618],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),g=r,c=u["".concat(p,".").concat(g)]||u[g]||m[g]||l;return n?a.createElement(c,i(i({ref:t},d),{},{components:n})):a.createElement(c,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=g;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8557:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const l={},i="Runtime Configuration",o={unversionedId:"RuntimeConfig/index",id:"RuntimeConfig/index",title:"Runtime Configuration",description:"When you initialize your application, you configure the behavior of Lightning at runtime. For example, you can define the use of WebWorkers or set the size of the canvas.",source:"@site/docs/RuntimeConfig/index.md",sourceDirName:"RuntimeConfig",slug:"/RuntimeConfig/",permalink:"/lightning-docs/docs/RuntimeConfig/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RuntimeConfig/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Toolbox",permalink:"/lightning-docs/docs/RenderEngine/Textures/Toolbox"},next:{title:"Templates",permalink:"/lightning-docs/docs/Templates/"}},p={},s=[{value:"Application Configuration Options",id:"application-configuration-options",level:2},{value:"Stage Configuration Options",id:"stage-configuration-options",level:2},{value:"Global stage scaling",id:"global-stage-scaling",level:2},{value:"FontSharp",id:"fontsharp",level:2},{value:"GPU Memory Tweak",id:"gpu-memory-tweak",level:2},{value:"Limitations of <code>Canvas2D</code>",id:"limitations-of-canvas2d",level:2}],d={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"runtime-configuration"},"Runtime Configuration"),(0,r.kt)("p",null,"When you initialize your application, you configure the behavior of Lightning at runtime. For example, you can define the use of WebWorkers or set the size of the canvas."),(0,r.kt)("p",null,"For that purpose, you use ",(0,r.kt)("em",{parentName:"p"},"Lightning configuration options")," at Application and / or Render Tree level, where you define the configuration options for the Render Tree in the ",(0,r.kt)("inlineCode",{parentName:"p"},"stage")," sub object."),(0,r.kt)("p",null,"For example, you might specify the following configuration options:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"const options = {debug: true, stage: {w: 1920, h: 1080, clearColor: 0xFF000000}}\nconst App = new MyApp(options);\n")),(0,r.kt)("h2",{id:"application-configuration-options"},"Application Configuration Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"debug")),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Shows changes to the focus path for debug purposes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"keys")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"A custom ",(0,r.kt)("a",{parentName:"td",href:"/lightning-docs/docs/HandlingInput/RemoteControl/KeyHandling#key-mapping"},"key map"))))),(0,r.kt)("h2",{id:"stage-configuration-options"},"Stage Configuration Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"canvas")),(0,r.kt)("td",{parentName:"tr",align:null},"HTMLCanvasElement"),(0,r.kt)("td",{parentName:"tr",align:null},"null"),(0,r.kt)("td",{parentName:"tr",align:null},"If specified, the canvas to be reused (default: create a new canvas)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"context")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"null"),(0,r.kt)("td",{parentName:"tr",align:null},"If specified, the WebGL / Canvas2D context to be used")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"w")),(0,r.kt)("td",{parentName:"tr",align:null},"Number"),(0,r.kt)("td",{parentName:"tr",align:null},"1920"),(0,r.kt)("td",{parentName:"tr",align:null},"Stage width in pixels")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"h")),(0,r.kt)("td",{parentName:"tr",align:null},"Number"),(0,r.kt)("td",{parentName:"tr",align:null},"1080"),(0,r.kt)("td",{parentName:"tr",align:null},"Stage height in pixels")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"precision")),(0,r.kt)("td",{parentName:"tr",align:null},"Float"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Global stage scaling (see details below)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"devicePixelRatio")),(0,r.kt)("td",{parentName:"tr",align:null},"Float"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Handling high DPI (see details below)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"memoryPressure")),(0,r.kt)("td",{parentName:"tr",align:null},"Number"),(0,r.kt)("td",{parentName:"tr",align:null},"24e6"),(0,r.kt)("td",{parentName:"tr",align:null},"Maximum GPU memory usage in pixels (see details below)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"clearColor")),(0,r.kt)("td",{parentName:"tr",align:null},"Float[]"),(0,r.kt)("td",{parentName:"tr",align:null},"[0,0,0,0]"),(0,r.kt)("td",{parentName:"tr",align:null},"Background color in ARGB values (0 to 1)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"defaultFontFace")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},'"sans-serif"'),(0,r.kt)("td",{parentName:"tr",align:null},"Default font family to use for text. See the ",(0,r.kt)("a",{parentName:"td",href:"/lightning-docs/docs/RenderEngine/Textures/Text#properties"},"fontFace Text property")," for how this value ends up being used. The special ",(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/font-family#values"},"CSS defined font family values"),' of "serif" and "sans-serif" may be used as well.')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fontSharp")),(0,r.kt)("td",{parentName:"tr",align:null},"Object, Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"{ precision:0.6666666667, fontSize: 39 }"),(0,r.kt)("td",{parentName:"tr",align:null},"Determine when to apply gl.NEAREST to TEXTURE_MAG_FILTER")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fixedDt")),(0,r.kt)("td",{parentName:"tr",align:null},"Number"),(0,r.kt)("td",{parentName:"tr",align:null},"0 (auto)"),(0,r.kt)("td",{parentName:"tr",align:null},"Fixed time step per frame (in ms)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"useImageWorker")),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"By default, use a Web Worker that parses images off-thread (web only)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"autostart")),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to ",(0,r.kt)("em",{parentName:"td"},"false"),", no automatic binding to  ",(0,r.kt)("inlineCode",{parentName:"td"},"requestAnimationFrame"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"canvas2d")),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If set tot ",(0,r.kt)("em",{parentName:"td"},"true"),", the Render Engine uses canvas2d instead of WebGL (limitations apply, see details below)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"readPixelsBeforeDraw")),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to ",(0,r.kt)("em",{parentName:"td"},"true"),", forces the Render Engine to readPixels before drawing, turning the Render pipeline to synchronous (this helps with flickering artifacts on certain devices). Note this will affect performance!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"readPixelsAfterDraw")),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to ",(0,r.kt)("em",{parentName:"td"},"true"),", forces the Render Engine to readPixels after drawing turning the Render pipeline synchronous (this helps with flickering artifacts on certain devices). Note this will affect performance! You may set ",(0,r.kt)("inlineCode",{parentName:"td"},"readPixelsAfterDrawThreshold")," to control the number of render-to-texture element re-renders that trigger syncronous pipeline.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"readPixelsAfterDrawThreshold")),(0,r.kt)("td",{parentName:"tr",align:null},"Number"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"readPixelsAfterDraw")," is set to ",(0,r.kt)("em",{parentName:"td"},"true"),", this is the number of render-to-texture element re-renders in a frame that will trigger the synchronous Render pipeline. This can enable full performance on frames that would not normally suffer from the flickering artifacts exhibited on certain devices.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"debugFrame")),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to ",(0,r.kt)("em",{parentName:"td"},"true"),", logs debug information about each frame including how many render-to-texture elements were re-rendered. This may impact performance and should not be turned on in production.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"forceTxCanvasSource")),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to ",(0,r.kt)("em",{parentName:"td"},"true"),", forces the Render Engine to use the canvasSource over getImageData for text (this helps with text generation on certain devices).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pauseRafLoopOnIdle")),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to ",(0,r.kt)("em",{parentName:"td"},"true")," will stop the Render Engine from calling ",(0,r.kt)("inlineCode",{parentName:"td"},"RequestAnimationFrame")," when there are no stage updates.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"devicePixelRatio")),(0,r.kt)("td",{parentName:"tr",align:null},"Number"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"The DPR is the logical to physical pixel density for a touch enabled device and affects how we calculate collisions")))),(0,r.kt)("h2",{id:"global-stage-scaling"},"Global stage scaling"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"We advise you to always develop your TV App in a ",(0,r.kt)("strong",{parentName:"p"},"1080p")," coordinate system (the Lightning default).")),(0,r.kt)("p",null,"Assume that you have created an App for 1080p quality, where you've used a 1920x1080 coordinate system to position all of the content. However, you've found out that the App needs to be displayed in a 1280x720 resolution."),(0,r.kt)("p",null,"To make this adjustment, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"precision")," property to perform a ",(0,r.kt)("em",{parentName:"p"},"global rescale")," of the coordinate system. For example, if you specify ",(0,r.kt)("inlineCode",{parentName:"p"},"precision: 2/3"),", the 1920 x-position will be mapped to the 1280-output pixel coordinate. This downscaling generally works well and can improve quality (less pixel interpolation) while reducing memory usage."),(0,r.kt)("p",null,"By setting  ",(0,r.kt)("inlineCode",{parentName:"p"},"precision: 2"),", the 1920 x-position will be mapped to a 3840-output pixel coordinate, effectively upscaling the content for 4K resolution. Please note that upscaling may result in reduced performance due to the higher GPU memory usage."),(0,r.kt)("p",null,"Keep in mind that WebGL rasterizes at pixel boundaries. This means that when it uses a line width of 2 in 1080p quality, it may render at either 2px or 3px in 720p (depending on the rendered pixel offset). If you encounter such problems, you'll need to set the sizing at a multiple of 3 to ensure proper rendering."),(0,r.kt)("h1",{id:"handling-high-pixel-density-high-dpi"},"Handling high pixel density (high DPI)"),(0,r.kt)("p",null,"With the increasing number of devices in the market having high pixel densities (DPI), it's important to handle high DPI properly in your Lightning app. Fortunately, you can take advantage of the higher resolution by setting the devicePixelRatio property, which is a minor and generally non-disruptive change.\nIt's worth noting that canvas elements, like most graphics elements, have two sizes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The size they are displayed in the page"),(0,r.kt)("li",{parentName:"ul"},"The size of their content")),(0,r.kt)("p",null,"For a canvas element, the size of the content or drawingBuffer is determined by the width and height attributes of the canvas, while the display size is determined by the CSS attributes applied to the canvas. Setting ",(0,r.kt)("inlineCode",{parentName:"p"},"devicePixelRatio: 2")," will result in the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<canvas width="3840" height="2060" style="width: 1920px; height: 1080px;"></canvas>\n')),(0,r.kt)("p",null,"a canvas that has a drawingBuffer of size 3840x2060 pixels but is displayed at a 1920x1080 viewport."),(0,r.kt)("p",null,"When viewed on High DPI displays, the browser will automatically upscale the canvas content to ensure that it appears at the correct size on the screen. However, if the devicePixelRatio (DPR) is not set properly, a Lightning application may appear to render at a lower-than-native resolution, which can introduce aliasing."),(0,r.kt)("p",null,"It's essential to handle high DPI properly to ensure that your Lightning app looks crisp and clear on high DPI displays"),(0,r.kt)("h2",{id:"fontsharp"},"FontSharp"),(0,r.kt)("p",null,"By default we apply ",(0,r.kt)("inlineCode",{parentName:"p"},"gl.LINEAR")," to texture ",(0,r.kt)("inlineCode",{parentName:"p"},"TEXTURE_MAG_FILTER")," parameter. This can lead to a more blurry font\nwhen we try to render smaller fonts on lower precisions. By changing the ",(0,r.kt)("inlineCode",{parentName:"p"},"fontSharp")," stage setting you can adjust the behaviour:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fontSharp: {\n    precision:0.6666666667,\n    fontSize: 39\n}\n")),(0,r.kt)("p",null,"means: set texture magnification filter (gl.TEXTURE_MAG_FILTER) to ",(0,r.kt)("inlineCode",{parentName:"p"},"gl.NEAREST")," when the font-size of our current text texture is\nlower or equal to 39 and our render precision is lower or equal to 0.6666666667."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fontSharp: false\n")),(0,r.kt)("p",null,"Will disable it completely and will use ",(0,r.kt)("inlineCode",{parentName:"p"},"gl.LINEAR")," as texture magnification filter."),(0,r.kt)("h2",{id:"gpu-memory-tweak"},"GPU Memory Tweak"),(0,r.kt)("p",null,"This defines the total number of pixels that may be allocated in GPU memory, which allows you to tweak the amount of GPU memory that your Lightning App can use."),(0,r.kt)("p",null,"If this amount is reached, Lightning only performs an ",(0,r.kt)("em",{parentName:"p"},"unused texture cleanup"),". Ideally, this situation does not occur often."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A single pixel uses between 4 and 6 bytes of GPU memory.")),(0,r.kt)("h2",{id:"limitations-of-canvas2d"},"Limitations of ",(0,r.kt)("inlineCode",{parentName:"h2"},"Canvas2D")),(0,r.kt)("p",null,"If WebGL is not available or if Canvas2D is set to ",(0,r.kt)("em",{parentName:"p"},"false"),", Lightning uses ",(0,r.kt)("em",{parentName:"p"},"Canvas2D")," for rendering output."),(0,r.kt)("p",null,"Note that some functionality (such as WebGL-only shaders) will not work (the default shader will be used instead)."),(0,r.kt)("p",null,"Another limitation applies to  ",(0,r.kt)("em",{parentName:"p"},"colorizing textures"),". You can safely colorize rectangle textures and even provide (linear-only) gradients. However, other textures such as text and images require the engine to create an ",(0,r.kt)("em",{parentName:"p"},"offscreen")," colorized texture, where gradients are not supported. This is expensive in terms of CPU and memory, but if used sparingly to color text or tint images one time, it works fine in practice."))}m.isMDXComponent=!0}}]);