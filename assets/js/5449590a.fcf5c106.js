"use strict";(self.webpackChunklightning_docs=self.webpackChunklightning_docs||[]).push([[4810],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,f=p["".concat(s,".").concat(h)]||p[h]||u[h]||o;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6516:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},i="Render Engine",l={unversionedId:"RenderEngine/index",id:"RenderEngine/index",title:"Render Engine",description:"The most important Lightning component is the WebGL 2d Render Engine. Its purpose is to convert the defined and changed Render Tree to a series of WebGL commands as fast as possible.",source:"@site/docs/RenderEngine/index.md",sourceDirName:"RenderEngine",slug:"/RenderEngine/",permalink:"/lightning-docs/docs/RenderEngine/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RenderEngine/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Touch Input",permalink:"/lightning-docs/docs/HandlingInput/Touch"},next:{title:"Elements",permalink:"/lightning-docs/docs/RenderEngine/Elements/"}},s={},c=[{value:"Locate Updated Branches",id:"locate-updated-branches",level:2},{value:"Populate Coordinate Buffers",id:"populate-coordinate-buffers",level:2},{value:"Draw Textures",id:"draw-textures",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"render-engine"},"Render Engine"),(0,a.kt)("p",null,"The most important Lightning component is the ",(0,a.kt)("em",{parentName:"p"},"WebGL 2d Render Engine"),". Its purpose is to convert the defined and changed ",(0,a.kt)("a",{parentName:"p",href:"/lightning-docs/docs/RenderEngine/RenderTree"},"Render Tree")," to a series of WebGL commands as fast as possible."),(0,a.kt)("p",null,"Lightning subscribes to ",(0,a.kt)("inlineCode",{parentName:"p"},"requestAnimationFrame")," for drawing the Render Tree frame. The actions that are executed, are:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#Locate-Updated-Branches"},"Locate Updated Branches")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#Populate-Coordinate-Buffers"},"Populate Coordinate Buffers")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#Draw-Textures"},"Draw Textures"))),(0,a.kt)("h2",{id:"locate-updated-branches"},"Locate Updated Branches"),(0,a.kt)("p",null,"Generally, if the Render Tree has changed since the last frame was rendered, the changed branches are ",(0,a.kt)("em",{parentName:"p"},"immediately")," tagged as ",(0,a.kt)("inlineCode",{parentName:"p"},"hasUpdates"),"."),(0,a.kt)("p",null,"Drawing a frame starts with executing the following actions:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Traverse the ",(0,a.kt)("em",{parentName:"li"},"updated")," branches"),(0,a.kt)("li",{parentName:"ol"},"Recalculate the render coordinates\nof these branches"),(0,a.kt)("li",{parentName:"ol"},"Skip the branches without updates")),(0,a.kt)("p",null,"This workflow prevents a slow creation of large applications with many sections."),(0,a.kt)("p",null,"Other Lightning features that contribute to a good rendering performance, are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"No rendering of invisible parts\n(see ",(0,a.kt)("a",{parentName:"li",href:"/lightning-docs/docs/RenderEngine/Elements/Rendering"},"Rendering")," for details)"),(0,a.kt)("li",{parentName:"ul"},"Detection of out-of-screen branches, which enables the creation of (nearly) infinite, high-performance scrolling lists"),(0,a.kt)("li",{parentName:"ul"},"No re-rendering when no changes are detected, which almost 'nullifies' resource usage and power consumption")),(0,a.kt)("h2",{id:"populate-coordinate-buffers"},"Populate Coordinate Buffers"),(0,a.kt)("p",null,"This step involves the following actions:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Traverse all visible and on-screen branches"),(0,a.kt)("li",{parentName:"ol"},"Gather the textures to be drawn (including their coordinates)"),(0,a.kt)("li",{parentName:"ol"},"Upload these textures to the GPU in a memory buffer")),(0,a.kt)("h2",{id:"draw-textures"},"Draw Textures"),(0,a.kt)("p",null,"Finally, the textures are drawn using WebGL commands."),(0,a.kt)("p",null,"The result is an updated canvas filled with the current state of\nthe Render Tree."))}u.isMDXComponent=!0}}]);