"use strict";(self.webpackChunklightning_docs=self.webpackChunklightning_docs||[]).push([[6460],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=l(n),h=i,m=u["".concat(c,".").concat(h)]||u[h]||p[h]||s;return n?o.createElement(m,a(a({ref:t},d),{},{components:n})):o.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=h;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r[u]="string"==typeof e?e:i,a[1]=r;for(var l=2;l<s;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8393:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var o=n(7462),i=(n(7294),n(3905));const s={},a="Focus",r={unversionedId:"HandlingInput/RemoteControl/Focus",id:"HandlingInput/RemoteControl/Focus",title:"Focus",description:"To handle key events, Lightning needs to know which component is the active component. This component and its descendants (including the App itself) are called the focus path.",source:"@site/docs/HandlingInput/RemoteControl/Focus.md",sourceDirName:"HandlingInput/RemoteControl",slug:"/HandlingInput/RemoteControl/Focus",permalink:"/lightning-docs/docs/HandlingInput/RemoteControl/Focus",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/HandlingInput/RemoteControl/Focus.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Remote and Keyboard Control Interaction",permalink:"/lightning-docs/docs/HandlingInput/RemoteControl/"},next:{title:"Key Handling",permalink:"/lightning-docs/docs/HandlingInput/RemoteControl/KeyHandling"}},c={},l=[{value:"Using the <code>getFocused()</code> Method",id:"using-the-getfocused-method",level:2},{value:"Delegating Focus",id:"delegating-focus",level:2},{value:"Using the <code>focus()</code>\xa0and <code>unfocus()</code> Methods",id:"using-the-focusand-unfocus-methods",level:2},{value:"Live Demo",id:"live-demo",level:2}],d={toc:l},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"focus"},"Focus"),(0,i.kt)("p",null,"To handle key events, Lightning needs to know which component is the ",(0,i.kt)("em",{parentName:"p"},"active")," component. This component and its descendants (including the App itself) are called the ",(0,i.kt)("em",{parentName:"p"},"focus path"),"."),(0,i.kt)("p",null,"The focus path is determined by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"_getFocused()")," method of the App object."),(0,i.kt)("h2",{id:"using-the-getfocused-method"},"Using the ",(0,i.kt)("inlineCode",{parentName:"h2"},"getFocused()")," Method"),(0,i.kt)("p",null,"By default, or if the ",(0,i.kt)("inlineCode",{parentName:"p"},"_getFocused()")," method returns 'undefined', the focus path stops here and the App is the active component (and the focus path only contains the App itself)."),(0,i.kt)("p",null,"However, if ",(0,i.kt)("inlineCode",{parentName:"p"},"_getFocused()")," returns a child component, that child component is also added to the focus path and the associated ",(0,i.kt)("inlineCode",{parentName:"p"},"_getFocused()")," method is also invoked. To put it another way: the components may ",(0,i.kt)("em",{parentName:"p"},"delegate")," focus to their descendants (see ",(0,i.kt)("a",{parentName:"p",href:"#delegating-focus"},"below"),")."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This process is repeated ",(0,i.kt)("em",{parentName:"p"},"recursively")," until the active component is found.")),(0,i.kt)("p",null,"The focus path is only ",(0,i.kt)("em",{parentName:"p"},"recalculated")," at the following specific events:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A component's state is changed."),(0,i.kt)("li",{parentName:"ul"},"A key is pressed."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"_refocus()")," has been called on any component.")),(0,i.kt)("h2",{id:"delegating-focus"},"Delegating Focus"),(0,i.kt)("p",null,"A common way to delegate focus is to use ",(0,i.kt)("a",{parentName:"p",href:"../Components/CompStates/index.md"},"states"),", which overrides the ",(0,i.kt)("inlineCode",{parentName:"p"},"_getFocused()")," method within each state class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"static _states() {\n    return [\n        class Buttons extends this {\n            _getFocused() {\n                return this.tag('Buttons')\n            }\n        },\n        class List extends this {\n            _getFocused() {\n                return this.tag('List')\n            }\n        }\n    ]\n}\n")),(0,i.kt)("p",null,"If the name of a ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," is based on your components, you can also use a ",(0,i.kt)("em",{parentName:"p"},"generic")," method to control it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"_getFocused() {\n    return this.tag(this.state)\n}\n")),(0,i.kt)("p",null,"For components that are generated dynamically (like a ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," with items served by an API), it is recommended that you create an ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," variable to delegate your focus. After that, you can bind some keys for the user to change the focus to a different component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"_init() {\n    this.index = 0\n}\n\n_handleLeft() {\n    if(this.index > 0) {\n        this.index--;\n    }\n}\n\n_handleRight() {\n    if(this.index < this.children.length - 1) {\n        this.index++;\n    }\n}\n\nreset() {\n    this.index = 0;\n    this._refocus(); // We need to force focus recalc.\n}\n\n_getFocused() {\n    return this.children[this.index]\n}\n")),(0,i.kt)("h2",{id:"using-the-focusand-unfocus-methods"},"Using the ",(0,i.kt)("inlineCode",{parentName:"h2"},"focus()"),"\xa0and ",(0,i.kt)("inlineCode",{parentName:"h2"},"unfocus()")," Methods"),(0,i.kt)("p",null,"Lightning fires ",(0,i.kt)("inlineCode",{parentName:"p"},"_focus()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"_unfocus()")," events on ",(0,i.kt)("a",{parentName:"p",href:"../Components/index.md"},"components")," when the focus changes. These methods can be used to change the appearance or state of the component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"_focus() {\n    //add code to do something when your component receives focus\n}\n\n_unfocus() {\n    //add code to do something when your component loses focus\n}\n")),(0,i.kt)("h2",{id:"live-demo"},"Live Demo"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"class FocusDemo extends lng.Application {\n    static _template() {\n        return {\n            x: 20, y: 20,\n            Buttons: {\n                LeftButton: { type: ExampleButton, buttonText: 'Left' },\n                RightButton: { x: 200, type: ExampleButton, buttonText: 'Right' }\n            },\n            List: { y: 100, type: ExampleList }\n        }\n    }\n    _init() {\n        this.buttonIndex = 0\n        this.tag('List').items = [1,2,3,4].map((i) => ({label: i }))\n        this._setState('Buttons')\n    }\n    _handleUp() {\n        this._setState('Buttons')\n    }\n    _handleDown() {\n        this._setState('List')\n    }\n    static _states() {\n        return [\n            class Buttons extends this {\n                _handleLeft() {\n                    this.buttonIndex = 0\n                }\n                _handleRight() {\n                    this.buttonIndex = 1\n                }\n                _getFocused() {\n                    return this.tag('Buttons').children[this.buttonIndex]\n                }\n            },\n            class List extends this {\n                _getFocused() {\n                    return this.tag('List')\n                }\n            }\n        ]\n    }\n}\n\nclass ExampleButton extends lng.component {\n    static _template() {\n        return {\n            color: 0xff1f1f1f,\n            texture: lng.Tools.getRoundRect(150, 40, 4),\n            Label: {\n                x: 75, y: 22, mount: .5, color: 0xffffffff, text: { fontSize: 20 }\n            }\n        }\n    }\n    _init() {\n        this.tag('Label').patch({ text: { text: this.buttonText }})\n    }\n    _focus() {\n        this.color = 0xffffffff\n        this.tag('Label').color = 0xff1f1f1f\n    }\n    _unfocus() {\n        this.color = 0xff1f1f1f\n        this.tag('Label').color = 0xffffffff\n    }\n}\n\nclass ExampleList extends lng.component {\n    static _template() {\n        return {}\n    }\n    _init() {\n        this.index = 0\n    }\n    set items(items) {\n        this.children = items.map((item, index) => {\n            return {\n                ref: 'ListItem-' + index, //optional, for debug purposes\n                type: ExampleListItem,\n                x: index * 70, //item width + 20px margin\n                item //passing the item as an attribute\n            }\n        })\n    }\n    _getFocused() {\n        return this.children[this.index]\n    }\n    _handleLeft() {\n        if(this.index > 0) {\n            this.index--\n        }\n    }\n    _handleRight() {\n        // we don't know exactly how many items the list can have\n        // so we test it based on this component's child list\n        if(this.index < this.children.length - 1) {\n            this.index++\n        }\n    }\n}\n\nclass ExampleListItem extends lng.component {\n    static _template() {\n        return {\n            rect: true, w: 50, h: 50, color: 0xffff00ff, alpha: 0.8,\n            Label: {\n                x: 25, y: 30, mount: .5\n            }\n        }\n    }\n    _init() {\n        this.patch({ Label: { text: { text: this.item.label }}})\n    }\n    _focus() {\n        this.patch({ smooth: { alpha: 1, scale: 1.2 }})\n    }\n    _unfocus() {\n        this.patch({ smooth: { alpha: 0.8, scale: 1 }})\n    }\n}\n\nconst App = new FocusDemo({stage: {w: window.innerWidth, h: window.innerHeight, useImageWorker: false}});\ndocument.body.appendChild(App.stage.getCanvas());\n")))}p.isMDXComponent=!0}}]);